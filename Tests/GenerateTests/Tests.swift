
import FileGenerator
import XCTest

final class GeneratorTests: XCTestCase {

    let stringsFile = """
        "NameAlertTitle %@" = "Hello %@!";
        "OKButtonTitle" = "OK";
        """

    var stringsDictionary: [String: String] {
        do {
            let stringsData = try XCTUnwrap(stringsFile.data(using: .utf8))
            let plistObject = try PropertyListSerialization.propertyList(from: stringsData, format: nil)
            guard let stringsDictionary = plistObject as? [String: String] else {
                print("Failed to parse strings file — is it valid?")
                exit(1)
            }
            return stringsDictionary
        } catch {
            print("Failed to parse strings file — is it valid?")
            exit(1)
        }
    }

    func testGeneration() {

        let file = File(indentation: .spaces(4)) {
            Import("Foundation")
            Import("SwiftUI")
            ""
            "// This file was autogenerated — do not modify."
            ""

            // First, let's make some SwiftUI keys.
            Extension("LocalizedStringKey") {
                for key in stringsDictionary.keys.sorted() {
                    let keyComponents = key.components(separatedBy: " ")
                    let keyAsSymbol = keyComponents.first!.lowercaseFirstCharacter()

                    switch keyComponents.count {
                    case 0:
                        NoContent()
                    case 1:
                        #"static let \#(keyAsSymbol): LocalizedStringKey = LocalizedStringKey("\#(key)")"#
                    default:
                        let formatComponents = keyComponents.dropFirst(1).filter({ $0.starts(with: "%") })

                        // Image func
                        let imageParameterList: String = formatComponents.enumerated().map({ "imageValue value\($0.offset): Image" }).joined(separator: ", ")
                        StaticFunc(keyAsSymbol, parameters: imageParameterList) {
                            "var interpolation = LocalizedStringKey.StringInterpolation(literalCapacity: \(1 + formatComponents.count), interpolationCount: \(formatComponents.count))"
                            "interpolation.appendLiteral(\"\(keyComponents.first!)\")"
                            for format in formatComponents.enumerated() {
                                "interpolation.appendLiteral(\" \")"
                                "interpolation.appendInterpolation(value\(format.offset))"
                            }
                            "return LocalizedStringKey(stringInterpolation: interpolation)"
                        }

                        // String func
                        let stringParameterList: String = formatComponents.enumerated().map({ "formatValue value\($0.offset): String" }).joined(separator: ", ")

                        StaticFunc(keyAsSymbol, parameters: stringParameterList) {
                            "var interpolation = LocalizedStringKey.StringInterpolation(literalCapacity: \(1 + formatComponents.count), interpolationCount: \(formatComponents.count))"
                            "interpolation.appendLiteral(\"\(keyComponents.first!)\")"
                            for format in formatComponents.enumerated() {
                                "interpolation.appendLiteral(\" \")"
                                "interpolation.appendInterpolation(value\(format.offset))"
                            }
                            "return LocalizedStringKey(stringInterpolation: interpolation)"
                        }
                    }
                }
            }
        }

        XCTAssertEqual(file.content, """
            import Foundation
            import SwiftUI

            // This file was autogenerated — do not modify.

            extension LocalizedStringKey {
                static func nameAlertTitle(imageValue value0: Image) {
                    var interpolation = LocalizedStringKey.StringInterpolation(literalCapacity: 2, interpolationCount: 1)
                    interpolation.appendLiteral("NameAlertTitle")
                    interpolation.appendLiteral(" ")
                    interpolation.appendInterpolation(value0)
                    return LocalizedStringKey(stringInterpolation: interpolation)
                }
                static func nameAlertTitle(formatValue value0: String) {
                    var interpolation = LocalizedStringKey.StringInterpolation(literalCapacity: 2, interpolationCount: 1)
                    interpolation.appendLiteral("NameAlertTitle")
                    interpolation.appendLiteral(" ")
                    interpolation.appendInterpolation(value0)
                    return LocalizedStringKey(stringInterpolation: interpolation)
                }
                static let oKButtonTitle: LocalizedStringKey = LocalizedStringKey("OKButtonTitle")
            }
            """)
    }
}

struct StaticFunc<C: Content>: Content {
    let name: String
    let parameters: String
    let content: C
    init(_ name: String, parameters: String?, @ContentBuilder content: () -> C) {
        self.name = name
        self.parameters = parameters ?? ""
        self.content = content()
    }

    var body: some Content {
        "static func \(name)(\(parameters)) {"
        content.indented()
        "}"
    }
}

struct Import: Content {
    let name: String
    init(_ name: String) { self.name = name }
    var body: some Content { "import \(name)" }
}

struct Extension<C: Content>: Content {
    let name: String
    let content: C
    init(_ name: String, @ContentBuilder content: () -> C) {
        self.name = name
        self.content = content()
    }

    var body: some Content {
        "extension \(name) {"
        content.indented()
        "}"
    }
}

extension String {

    func lowercaseFirstCharacter() -> String {
        guard let first = first else { return self }
        var string = self
        string.replaceSubrange(
            string.startIndex..<string.index(string.startIndex, offsetBy: 1),
            with: first.lowercased())
        return string
    }
}
